/* tslint:disable */
/* eslint-disable */
/**
 * GanttChartApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AssignedPileUp
 */
export interface AssignedPileUp {
    /**
     * 
     * @type {Array<PileUpByPerson>}
     * @memberof AssignedPileUp
     */
    'users': Array<PileUpByPerson>;
    /**
     * 
     * @type {Array<number>}
     * @memberof AssignedPileUp
     */
    'labels': Array<number>;
    /**
     * 
     * @type {Array<object>}
     * @memberof AssignedPileUp
     */
    'styles': Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof AssignedPileUp
     */
    'display': boolean;
}
/**
 * 
 * @export
 * @interface DefaultPileUp
 */
export interface DefaultPileUp {
    /**
     * 
     * @type {number}
     * @memberof DefaultPileUp
     */
    'departmentId'?: number;
    /**
     * 
     * @type {AssignedPileUp}
     * @memberof DefaultPileUp
     */
    'assignedUser'?: AssignedPileUp;
    /**
     * 
     * @type {UnAssingedPileUp}
     * @memberof DefaultPileUp
     */
    'unAssignedPileUp'?: UnAssingedPileUp;
    /**
     * 
     * @type {NoOrdersReceivedPileUp}
     * @memberof DefaultPileUp
     */
    'noOrdersReceivedPileUp'?: NoOrdersReceivedPileUp;
    /**
     * 
     * @type {Array<number>}
     * @memberof DefaultPileUp
     */
    'labels': Array<number>;
    /**
     * 
     * @type {Array<object>}
     * @memberof DefaultPileUp
     */
    'styles': Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof DefaultPileUp
     */
    'display': boolean;
}
/**
 * 
 * @export
 * @interface DefautValidIndexUsers
 */
export interface DefautValidIndexUsers {
    /**
     * 
     * @type {Array<number>}
     * @memberof DefautValidIndexUsers
     */
    'UserIds': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof DefautValidIndexUsers
     */
    'ValidIndex': number;
}
/**
 * 
 * @export
 * @interface DeleteDepartmentsIdRequest
 */
export interface DeleteDepartmentsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteDepartmentsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteDepartmentsIdResponse
 */
export interface DeleteDepartmentsIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteDepartmentsIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteFacilitiesIdRequest
 */
export interface DeleteFacilitiesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteFacilitiesIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteFacilitiesIdResponse
 */
export interface DeleteFacilitiesIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteFacilitiesIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteFacilitySharedLinksIdRequest
 */
export interface DeleteFacilitySharedLinksIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteFacilitySharedLinksIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteFacilitySharedLinksIdResponse
 */
export interface DeleteFacilitySharedLinksIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteFacilitySharedLinksIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteGanttGroupsIdRequest
 */
export interface DeleteGanttGroupsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteGanttGroupsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteGanttGroupsIdResponse
 */
export interface DeleteGanttGroupsIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteGanttGroupsIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteHolidaysIdRequest
 */
export interface DeleteHolidaysIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteHolidaysIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteHolidaysIdResponse
 */
export interface DeleteHolidaysIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteHolidaysIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteMilestonesIdRequest
 */
export interface DeleteMilestonesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteMilestonesIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteMilestonesIdResponse
 */
export interface DeleteMilestonesIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteMilestonesIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteOperationSettingsIdRequest
 */
export interface DeleteOperationSettingsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteOperationSettingsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteOperationSettingsIdResponse
 */
export interface DeleteOperationSettingsIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteOperationSettingsIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteProcessesIdRequest
 */
export interface DeleteProcessesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteProcessesIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteProcessesIdResponse
 */
export interface DeleteProcessesIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteProcessesIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteSimulationRequest
 */
export interface DeleteSimulationRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteSimulationRequest
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface DeleteSimulationResponse
 */
export interface DeleteSimulationResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteSimulationResponse
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface DeleteTicketUsersIdRequest
 */
export interface DeleteTicketUsersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteTicketUsersIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteTicketUsersIdResponse
 */
export interface DeleteTicketUsersIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteTicketUsersIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteTicketsIdRequest
 */
export interface DeleteTicketsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteTicketsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteTicketsIdResponse
 */
export interface DeleteTicketsIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteTicketsIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteUnitsIdRequest
 */
export interface DeleteUnitsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteUnitsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteUnitsIdResponse
 */
export interface DeleteUnitsIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteUnitsIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface DeleteUsersIdRequest
 */
export interface DeleteUsersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteUsersIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteUsersIdResponse
 */
export interface DeleteUsersIdResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteUsersIdResponse
     */
    'msg'?: string;
}
/**
 * 
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'order': number;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface Facility
 */
export interface Facility {
    /**
     * 
     * @type {number}
     * @memberof Facility
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Facility
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Facility
     */
    'term_from': string;
    /**
     * 
     * @type {string}
     * @memberof Facility
     */
    'term_to': string;
    /**
     * 
     * @type {number}
     * @memberof Facility
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof Facility
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof Facility
     */
    'updated_at'?: number;
    /**
     * 
     * @type {string}
     * @memberof Facility
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof Facility
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Facility
     */
    'shipment_due_date': string;
}
/**
 * 
 * @export
 * @interface FacilitySharedLink
 */
export interface FacilitySharedLink {
    /**
     * 
     * @type {number}
     * @memberof FacilitySharedLink
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FacilitySharedLink
     */
    'facility_id': number;
    /**
     * 
     * @type {string}
     * @memberof FacilitySharedLink
     */
    'uuid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FacilitySharedLink
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof FacilitySharedLink
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface GanttGroup
 */
export interface GanttGroup {
    /**
     * 
     * @type {number}
     * @memberof GanttGroup
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof GanttGroup
     */
    'facility_id': number;
    /**
     * 
     * @type {number}
     * @memberof GanttGroup
     */
    'unit_id': number;
    /**
     * 
     * @type {string}
     * @memberof GanttGroup
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof GanttGroup
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface GetAllTicketsResponse
 */
export interface GetAllTicketsResponse {
    /**
     * 
     * @type {Array<Ticket>}
     * @memberof GetAllTicketsResponse
     */
    'list': Array<Ticket>;
}
/**
 * 
 * @export
 * @interface GetDefaultPileUpsRequest
 */
export interface GetDefaultPileUpsRequest {
    /**
     * 
     * @type {number}
     * @memberof GetDefaultPileUpsRequest
     */
    'currentFacilityId': number;
    /**
     * 
     * @type {boolean}
     * @memberof GetDefaultPileUpsRequest
     */
    'isAllMode': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetDefaultPileUpsRequest
     */
    'facilityTypes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetDefaultPileUpsResponse
 */
export interface GetDefaultPileUpsResponse {
    /**
     * 
     * @type {Array<DefaultPileUp>}
     * @memberof GetDefaultPileUpsResponse
     */
    'defaultPileUps': Array<DefaultPileUp>;
    /**
     * 
     * @type {string}
     * @memberof GetDefaultPileUpsResponse
     */
    'globalStartDate': string;
    /**
     * 
     * @type {Array<DefautValidIndexUsers>}
     * @memberof GetDefaultPileUpsResponse
     */
    'defaultValidUserIndexes': Array<DefautValidIndexUsers>;
}
/**
 * 
 * @export
 * @interface GetDepartmentsIdRequest
 */
export interface GetDepartmentsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetDepartmentsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetDepartmentsIdResponse
 */
export interface GetDepartmentsIdResponse {
    /**
     * 
     * @type {Department}
     * @memberof GetDepartmentsIdResponse
     */
    'department'?: Department;
}
/**
 * 
 * @export
 * @interface GetDepartmentsResponse
 */
export interface GetDepartmentsResponse {
    /**
     * 
     * @type {Array<Department>}
     * @memberof GetDepartmentsResponse
     */
    'list': Array<Department>;
}
/**
 * 
 * @export
 * @interface GetFacilitiesIdRequest
 */
export interface GetFacilitiesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetFacilitiesIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetFacilitiesIdResponse
 */
export interface GetFacilitiesIdResponse {
    /**
     * 
     * @type {Facility}
     * @memberof GetFacilitiesIdResponse
     */
    'facility'?: Facility;
}
/**
 * 
 * @export
 * @interface GetFacilitiesResponse
 */
export interface GetFacilitiesResponse {
    /**
     * 
     * @type {Array<Facility>}
     * @memberof GetFacilitiesResponse
     */
    'list': Array<Facility>;
}
/**
 * 
 * @export
 * @interface GetFacilitySharedLinksIdRequest
 */
export interface GetFacilitySharedLinksIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetFacilitySharedLinksIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetFacilitySharedLinksIdResponse
 */
export interface GetFacilitySharedLinksIdResponse {
    /**
     * 
     * @type {FacilitySharedLink}
     * @memberof GetFacilitySharedLinksIdResponse
     */
    'facilitySharedLink'?: FacilitySharedLink;
}
/**
 * 
 * @export
 * @interface GetFacilitySharedLinksResponse
 */
export interface GetFacilitySharedLinksResponse {
    /**
     * 
     * @type {Array<FacilitySharedLink>}
     * @memberof GetFacilitySharedLinksResponse
     */
    'list': Array<FacilitySharedLink>;
}
/**
 * 
 * @export
 * @interface GetGanttGroupsIdRequest
 */
export interface GetGanttGroupsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetGanttGroupsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetGanttGroupsIdResponse
 */
export interface GetGanttGroupsIdResponse {
    /**
     * 
     * @type {GanttGroup}
     * @memberof GetGanttGroupsIdResponse
     */
    'ganttGroup'?: GanttGroup;
}
/**
 * 
 * @export
 * @interface GetGanttGroupsResponse
 */
export interface GetGanttGroupsResponse {
    /**
     * 
     * @type {Array<GanttGroup>}
     * @memberof GetGanttGroupsResponse
     */
    'list': Array<GanttGroup>;
}
/**
 * 
 * @export
 * @interface GetHolidaysIdRequest
 */
export interface GetHolidaysIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetHolidaysIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetHolidaysIdResponse
 */
export interface GetHolidaysIdResponse {
    /**
     * 
     * @type {Holiday}
     * @memberof GetHolidaysIdResponse
     */
    'holiday'?: Holiday;
}
/**
 * 
 * @export
 * @interface GetHolidaysResponse
 */
export interface GetHolidaysResponse {
    /**
     * 
     * @type {Array<Holiday>}
     * @memberof GetHolidaysResponse
     */
    'list': Array<Holiday>;
}
/**
 * 
 * @export
 * @interface GetMilestonesIdRequest
 */
export interface GetMilestonesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetMilestonesIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetMilestonesIdResponse
 */
export interface GetMilestonesIdResponse {
    /**
     * 
     * @type {Milestone}
     * @memberof GetMilestonesIdResponse
     */
    'milestone'?: Milestone;
}
/**
 * 
 * @export
 * @interface GetMilestonesResponse
 */
export interface GetMilestonesResponse {
    /**
     * 
     * @type {Array<Milestone>}
     * @memberof GetMilestonesResponse
     */
    'list': Array<Milestone>;
}
/**
 * 
 * @export
 * @interface GetOperationSettingsIdRequest
 */
export interface GetOperationSettingsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetOperationSettingsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetOperationSettingsIdResponse
 */
export interface GetOperationSettingsIdResponse {
    /**
     * 
     * @type {Array<OperationSetting>}
     * @memberof GetOperationSettingsIdResponse
     */
    'operationSettings': Array<OperationSetting>;
}
/**
 * 
 * @export
 * @interface GetOperationSettingsResponse
 */
export interface GetOperationSettingsResponse {
    /**
     * 
     * @type {Array<OperationSetting>}
     * @memberof GetOperationSettingsResponse
     */
    'list': Array<OperationSetting>;
}
/**
 * 
 * @export
 * @interface GetPileUpsResponse
 */
export interface GetPileUpsResponse {
    /**
     * 
     * @type {Array<GetPileUpsResponseListInner>}
     * @memberof GetPileUpsResponse
     */
    'list': Array<GetPileUpsResponseListInner>;
}
/**
 * 
 * @export
 * @interface GetPileUpsResponseListInner
 */
export interface GetPileUpsResponseListInner {
    /**
     * 
     * @type {number}
     * @memberof GetPileUpsResponseListInner
     */
    'facilityId': number;
    /**
     * 
     * @type {Array<Holiday>}
     * @memberof GetPileUpsResponseListInner
     */
    'holidays': Array<Holiday>;
    /**
     * 
     * @type {Array<GanttGroup>}
     * @memberof GetPileUpsResponseListInner
     */
    'ganttGroups': Array<GanttGroup>;
}
/**
 * 
 * @export
 * @interface GetProcessesIdRequest
 */
export interface GetProcessesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetProcessesIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetProcessesIdResponse
 */
export interface GetProcessesIdResponse {
    /**
     * 
     * @type {Process}
     * @memberof GetProcessesIdResponse
     */
    'process'?: Process;
}
/**
 * 
 * @export
 * @interface GetProcessesResponse
 */
export interface GetProcessesResponse {
    /**
     * 
     * @type {Array<Process>}
     * @memberof GetProcessesResponse
     */
    'list': Array<Process>;
}
/**
 * 
 * @export
 * @interface GetScheduleAlertsResponse
 */
export interface GetScheduleAlertsResponse {
    /**
     * 
     * @type {Array<ScheduleAlert>}
     * @memberof GetScheduleAlertsResponse
     */
    'list': Array<ScheduleAlert>;
}
/**
 * 
 * @export
 * @interface GetSimulationMasterDiffResponse
 */
export interface GetSimulationMasterDiffResponse {
    /**
     * 
     * @type {Array<Process>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'beforeProcesses': Array<Process>;
    /**
     * 
     * @type {Array<Process>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'diffProcesses'?: Array<Process>;
    /**
     * 
     * @type {Array<Process>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'afterProcesses': Array<Process>;
    /**
     * 
     * @type {Array<Department>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'beforeDepartments': Array<Department>;
    /**
     * 
     * @type {Array<Department>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'diffDepartments'?: Array<Department>;
    /**
     * 
     * @type {Array<Department>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'afterDepartments': Array<Department>;
    /**
     * 
     * @type {Array<User>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'beforeUsers': Array<User>;
    /**
     * 
     * @type {Array<User>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'diffUsers'?: Array<User>;
    /**
     * 
     * @type {Array<User>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'afterUsers': Array<User>;
    /**
     * 
     * @type {Array<Unit>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'beforeUnits': Array<Unit>;
    /**
     * 
     * @type {Array<Unit>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'diffUnits'?: Array<Unit>;
    /**
     * 
     * @type {Array<Unit>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'afterUnits': Array<Unit>;
    /**
     * 
     * @type {Array<Holiday>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'beforeHolidays': Array<Holiday>;
    /**
     * 
     * @type {Array<Holiday>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'diffHolidays'?: Array<Holiday>;
    /**
     * 
     * @type {Array<Holiday>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'afterHolidays': Array<Holiday>;
    /**
     * 
     * @type {Array<Milestone>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'beforeMilestones': Array<Milestone>;
    /**
     * 
     * @type {Array<Milestone>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'diffMilestones'?: Array<Milestone>;
    /**
     * 
     * @type {Array<Milestone>}
     * @memberof GetSimulationMasterDiffResponse
     */
    'afterMilestones': Array<Milestone>;
}
/**
 * 
 * @export
 * @interface GetSimulationResponse
 */
export interface GetSimulationResponse {
    /**
     * 
     * @type {SimulationLock}
     * @memberof GetSimulationResponse
     */
    'simulationLock': SimulationLock;
}
/**
 * 
 * @export
 * @interface GetTicketMemoIdRequest
 */
export interface GetTicketMemoIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetTicketMemoIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetTicketMemoIdResponse
 */
export interface GetTicketMemoIdResponse {
    /**
     * 
     * @type {string}
     * @memberof GetTicketMemoIdResponse
     */
    'memo': string;
    /**
     * 
     * @type {number}
     * @memberof GetTicketMemoIdResponse
     */
    'updated_at': number;
}
/**
 * 
 * @export
 * @interface GetTicketUsersIdRequest
 */
export interface GetTicketUsersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetTicketUsersIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetTicketUsersIdResponse
 */
export interface GetTicketUsersIdResponse {
    /**
     * 
     * @type {TicketUser}
     * @memberof GetTicketUsersIdResponse
     */
    'ticketUser'?: TicketUser;
}
/**
 * 
 * @export
 * @interface GetTicketUsersResponse
 */
export interface GetTicketUsersResponse {
    /**
     * 
     * @type {Array<TicketUser>}
     * @memberof GetTicketUsersResponse
     */
    'list': Array<TicketUser>;
}
/**
 * 
 * @export
 * @interface GetTicketsIdRequest
 */
export interface GetTicketsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetTicketsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetTicketsIdResponse
 */
export interface GetTicketsIdResponse {
    /**
     * 
     * @type {Ticket}
     * @memberof GetTicketsIdResponse
     */
    'ticket'?: Ticket;
}
/**
 * 
 * @export
 * @interface GetTicketsResponse
 */
export interface GetTicketsResponse {
    /**
     * 
     * @type {Array<Ticket>}
     * @memberof GetTicketsResponse
     */
    'list': Array<Ticket>;
}
/**
 * 
 * @export
 * @interface GetUnitsIdRequest
 */
export interface GetUnitsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetUnitsIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetUnitsIdResponse
 */
export interface GetUnitsIdResponse {
    /**
     * 
     * @type {Unit}
     * @memberof GetUnitsIdResponse
     */
    'unit'?: Unit;
}
/**
 * 
 * @export
 * @interface GetUnitsResponse
 */
export interface GetUnitsResponse {
    /**
     * 
     * @type {Array<Unit>}
     * @memberof GetUnitsResponse
     */
    'list': Array<Unit>;
}
/**
 * 
 * @export
 * @interface GetUserInfoResponse
 */
export interface GetUserInfoResponse {
    /**
     * 
     * @type {User}
     * @memberof GetUserInfoResponse
     */
    'user'?: User;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserInfoResponse
     */
    'isSimulateUser'?: boolean;
}
/**
 * 
 * @export
 * @interface GetUsersIdRequest
 */
export interface GetUsersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof GetUsersIdRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetUsersIdResponse
 */
export interface GetUsersIdResponse {
    /**
     * 
     * @type {User}
     * @memberof GetUsersIdResponse
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface GetUsersResponse
 */
export interface GetUsersResponse {
    /**
     * 
     * @type {Array<User>}
     * @memberof GetUsersResponse
     */
    'list': Array<User>;
}
/**
 * 
 * @export
 * @interface Holiday
 */
export interface Holiday {
    /**
     * 
     * @type {number}
     * @memberof Holiday
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Holiday
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Holiday
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof Holiday
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof Holiday
     */
    'updated_at'?: number;
    /**
     * 
     * @type {number}
     * @memberof Holiday
     */
    'facility_id': number;
}
/**
 * 
 * @export
 * @interface Milestone
 */
export interface Milestone {
    /**
     * 
     * @type {number}
     * @memberof Milestone
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Milestone
     */
    'facility_id': number;
    /**
     * 
     * @type {string}
     * @memberof Milestone
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof Milestone
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof Milestone
     */
    'order': number;
    /**
     * 
     * @type {string}
     * @memberof Milestone
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof Milestone
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface NoOrdersReceivedPileUp
 */
export interface NoOrdersReceivedPileUp {
    /**
     * 
     * @type {Array<PileUpByFacility>}
     * @memberof NoOrdersReceivedPileUp
     */
    'facilities': Array<PileUpByFacility>;
    /**
     * 
     * @type {Array<number>}
     * @memberof NoOrdersReceivedPileUp
     */
    'labels': Array<number>;
    /**
     * 
     * @type {Array<object>}
     * @memberof NoOrdersReceivedPileUp
     */
    'styles': Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof NoOrdersReceivedPileUp
     */
    'display': boolean;
}
/**
 * 
 * @export
 * @interface OperationSetting
 */
export interface OperationSetting {
    /**
     * 
     * @type {number}
     * @memberof OperationSetting
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OperationSetting
     */
    'facility_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OperationSetting
     */
    'unit_id'?: number;
    /**
     * 
     * @type {Array<WorkHour>}
     * @memberof OperationSetting
     */
    'workHours': Array<WorkHour>;
    /**
     * 
     * @type {string}
     * @memberof OperationSetting
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof OperationSetting
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface PileUp
 */
export interface PileUp {
    /**
     * 
     * @type {string}
     * @memberof PileUp
     */
    'gantt_groups': string;
    /**
     * 
     * @type {number}
     * @memberof PileUp
     */
    'holidays': number;
}
/**
 * 
 * @export
 * @interface PileUpByFacility
 */
export interface PileUpByFacility {
    /**
     * 
     * @type {number}
     * @memberof PileUpByFacility
     */
    'facilityId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PileUpByFacility
     */
    'labels': Array<number>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PileUpByFacility
     */
    'styles': Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof PileUpByFacility
     */
    'hasError': boolean;
}
/**
 * 
 * @export
 * @interface PileUpByPerson
 */
export interface PileUpByPerson {
    /**
     * 
     * @type {User}
     * @memberof PileUpByPerson
     */
    'user': User;
    /**
     * 
     * @type {Array<number>}
     * @memberof PileUpByPerson
     */
    'labels': Array<number>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PileUpByPerson
     */
    'styles': Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof PileUpByPerson
     */
    'hasError': boolean;
}
/**
 * 
 * @export
 * @interface PostCopyFacilitysRequest
 */
export interface PostCopyFacilitysRequest {
    /**
     * 
     * @type {number}
     * @memberof PostCopyFacilitysRequest
     */
    'facilityId': number;
    /**
     * 
     * @type {Facility}
     * @memberof PostCopyFacilitysRequest
     */
    'facility': Facility;
}
/**
 * 
 * @export
 * @interface PostCopyFacilitysResponse
 */
export interface PostCopyFacilitysResponse {
    /**
     * 
     * @type {string}
     * @memberof PostCopyFacilitysResponse
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface PostDepartmentsIdRequest
 */
export interface PostDepartmentsIdRequest {
    /**
     * 
     * @type {Department}
     * @memberof PostDepartmentsIdRequest
     */
    'department'?: Department;
}
/**
 * 
 * @export
 * @interface PostDepartmentsIdResponse
 */
export interface PostDepartmentsIdResponse {
    /**
     * 
     * @type {Department}
     * @memberof PostDepartmentsIdResponse
     */
    'department'?: Department;
}
/**
 * 
 * @export
 * @interface PostDepartmentsRequest
 */
export interface PostDepartmentsRequest {
    /**
     * 
     * @type {Department}
     * @memberof PostDepartmentsRequest
     */
    'department'?: Department;
}
/**
 * 
 * @export
 * @interface PostDepartmentsResponse
 */
export interface PostDepartmentsResponse {
    /**
     * 
     * @type {Department}
     * @memberof PostDepartmentsResponse
     */
    'department'?: Department;
}
/**
 * 
 * @export
 * @interface PostFacilitiesIdRequest
 */
export interface PostFacilitiesIdRequest {
    /**
     * 
     * @type {Facility}
     * @memberof PostFacilitiesIdRequest
     */
    'facility'?: Facility;
}
/**
 * 
 * @export
 * @interface PostFacilitiesIdResponse
 */
export interface PostFacilitiesIdResponse {
    /**
     * 
     * @type {Facility}
     * @memberof PostFacilitiesIdResponse
     */
    'facility'?: Facility;
}
/**
 * 
 * @export
 * @interface PostFacilitiesRequest
 */
export interface PostFacilitiesRequest {
    /**
     * 
     * @type {Facility}
     * @memberof PostFacilitiesRequest
     */
    'facility'?: Facility;
}
/**
 * 
 * @export
 * @interface PostFacilitiesResponse
 */
export interface PostFacilitiesResponse {
    /**
     * 
     * @type {Facility}
     * @memberof PostFacilitiesResponse
     */
    'facility'?: Facility;
}
/**
 * 
 * @export
 * @interface PostFacilitySharedLinksIdRequest
 */
export interface PostFacilitySharedLinksIdRequest {
    /**
     * 
     * @type {FacilitySharedLink}
     * @memberof PostFacilitySharedLinksIdRequest
     */
    'facilitySharedLink'?: FacilitySharedLink;
}
/**
 * 
 * @export
 * @interface PostFacilitySharedLinksIdResponse
 */
export interface PostFacilitySharedLinksIdResponse {
    /**
     * 
     * @type {FacilitySharedLink}
     * @memberof PostFacilitySharedLinksIdResponse
     */
    'facilitySharedLink'?: FacilitySharedLink;
}
/**
 * 
 * @export
 * @interface PostFacilitySharedLinksRequest
 */
export interface PostFacilitySharedLinksRequest {
    /**
     * 
     * @type {FacilitySharedLink}
     * @memberof PostFacilitySharedLinksRequest
     */
    'facilitySharedLink'?: FacilitySharedLink;
}
/**
 * 
 * @export
 * @interface PostFacilitySharedLinksResponse
 */
export interface PostFacilitySharedLinksResponse {
    /**
     * 
     * @type {FacilitySharedLink}
     * @memberof PostFacilitySharedLinksResponse
     */
    'facilitySharedLink'?: FacilitySharedLink;
}
/**
 * 
 * @export
 * @interface PostGanttGroupsIdRequest
 */
export interface PostGanttGroupsIdRequest {
    /**
     * 
     * @type {GanttGroup}
     * @memberof PostGanttGroupsIdRequest
     */
    'ganttGroup'?: GanttGroup;
}
/**
 * 
 * @export
 * @interface PostGanttGroupsIdResponse
 */
export interface PostGanttGroupsIdResponse {
    /**
     * 
     * @type {GanttGroup}
     * @memberof PostGanttGroupsIdResponse
     */
    'ganttGroup'?: GanttGroup;
}
/**
 * 
 * @export
 * @interface PostGanttGroupsRequest
 */
export interface PostGanttGroupsRequest {
    /**
     * 
     * @type {GanttGroup}
     * @memberof PostGanttGroupsRequest
     */
    'ganttGroup'?: GanttGroup;
}
/**
 * 
 * @export
 * @interface PostGanttGroupsResponse
 */
export interface PostGanttGroupsResponse {
    /**
     * 
     * @type {GanttGroup}
     * @memberof PostGanttGroupsResponse
     */
    'ganttGroup'?: GanttGroup;
}
/**
 * 
 * @export
 * @interface PostHolidaysIdRequest
 */
export interface PostHolidaysIdRequest {
    /**
     * 
     * @type {Holiday}
     * @memberof PostHolidaysIdRequest
     */
    'holiday'?: Holiday;
}
/**
 * 
 * @export
 * @interface PostHolidaysIdResponse
 */
export interface PostHolidaysIdResponse {
    /**
     * 
     * @type {Holiday}
     * @memberof PostHolidaysIdResponse
     */
    'holiday'?: Holiday;
}
/**
 * 
 * @export
 * @interface PostHolidaysRequest
 */
export interface PostHolidaysRequest {
    /**
     * 
     * @type {Holiday}
     * @memberof PostHolidaysRequest
     */
    'holiday': Holiday;
}
/**
 * 
 * @export
 * @interface PostHolidaysResponse
 */
export interface PostHolidaysResponse {
    /**
     * 
     * @type {Holiday}
     * @memberof PostHolidaysResponse
     */
    'holiday'?: Holiday;
}
/**
 * 
 * @export
 * @interface PostLoginRequest
 */
export interface PostLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof PostLoginRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PostLoginRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof PostLoginRequest
     */
    'uuid'?: string;
}
/**
 * 
 * @export
 * @interface PostLoginResponse
 */
export interface PostLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof PostLoginResponse
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface PostLogoutResponse
 */
export interface PostLogoutResponse {
    /**
     * 
     * @type {string}
     * @memberof PostLogoutResponse
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface PostMilestonesIdRequest
 */
export interface PostMilestonesIdRequest {
    /**
     * 
     * @type {Milestone}
     * @memberof PostMilestonesIdRequest
     */
    'milestone'?: Milestone;
}
/**
 * 
 * @export
 * @interface PostMilestonesIdResponse
 */
export interface PostMilestonesIdResponse {
    /**
     * 
     * @type {Milestone}
     * @memberof PostMilestonesIdResponse
     */
    'milestone'?: Milestone;
}
/**
 * 
 * @export
 * @interface PostMilestonesRequest
 */
export interface PostMilestonesRequest {
    /**
     * 
     * @type {Milestone}
     * @memberof PostMilestonesRequest
     */
    'milestone'?: Milestone;
}
/**
 * 
 * @export
 * @interface PostMilestonesResponse
 */
export interface PostMilestonesResponse {
    /**
     * 
     * @type {Milestone}
     * @memberof PostMilestonesResponse
     */
    'milestone'?: Milestone;
}
/**
 * 
 * @export
 * @interface PostOperationSettingsIdRequest
 */
export interface PostOperationSettingsIdRequest {
    /**
     * 
     * @type {OperationSetting}
     * @memberof PostOperationSettingsIdRequest
     */
    'operationSetting'?: OperationSetting;
}
/**
 * 
 * @export
 * @interface PostOperationSettingsIdResponse
 */
export interface PostOperationSettingsIdResponse {
    /**
     * 
     * @type {OperationSetting}
     * @memberof PostOperationSettingsIdResponse
     */
    'operationSetting'?: OperationSetting;
}
/**
 * 
 * @export
 * @interface PostOperationSettingsRequest
 */
export interface PostOperationSettingsRequest {
    /**
     * 
     * @type {Array<OperationSetting>}
     * @memberof PostOperationSettingsRequest
     */
    'operationSettings'?: Array<OperationSetting>;
}
/**
 * 
 * @export
 * @interface PostOperationSettingsResponse
 */
export interface PostOperationSettingsResponse {
    /**
     * 
     * @type {OperationSetting}
     * @memberof PostOperationSettingsResponse
     */
    'operationSetting'?: OperationSetting;
}
/**
 * 
 * @export
 * @interface PostProcessesIdRequest
 */
export interface PostProcessesIdRequest {
    /**
     * 
     * @type {Process}
     * @memberof PostProcessesIdRequest
     */
    'process'?: Process;
}
/**
 * 
 * @export
 * @interface PostProcessesIdResponse
 */
export interface PostProcessesIdResponse {
    /**
     * 
     * @type {Process}
     * @memberof PostProcessesIdResponse
     */
    'process'?: Process;
}
/**
 * 
 * @export
 * @interface PostProcessesRequest
 */
export interface PostProcessesRequest {
    /**
     * 
     * @type {Process}
     * @memberof PostProcessesRequest
     */
    'process'?: Process;
}
/**
 * 
 * @export
 * @interface PostProcessesResponse
 */
export interface PostProcessesResponse {
    /**
     * 
     * @type {Process}
     * @memberof PostProcessesResponse
     */
    'process'?: Process;
}
/**
 * 
 * @export
 * @interface PostSimulationRequest
 */
export interface PostSimulationRequest {
    /**
     * 
     * @type {string}
     * @memberof PostSimulationRequest
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface PostSimulationResponse
 */
export interface PostSimulationResponse {
    /**
     * 
     * @type {string}
     * @memberof PostSimulationResponse
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface PostTicketMemoIdRequest
 */
export interface PostTicketMemoIdRequest {
    /**
     * 
     * @type {string}
     * @memberof PostTicketMemoIdRequest
     */
    'memo': string;
    /**
     * 
     * @type {number}
     * @memberof PostTicketMemoIdRequest
     */
    'updated_at': number;
}
/**
 * 
 * @export
 * @interface PostTicketMemoIdResponse
 */
export interface PostTicketMemoIdResponse {
    /**
     * 
     * @type {string}
     * @memberof PostTicketMemoIdResponse
     */
    'msg': string;
    /**
     * 
     * @type {number}
     * @memberof PostTicketMemoIdResponse
     */
    'updated_at': number;
}
/**
 * 
 * @export
 * @interface PostTicketUsersIdRequest
 */
export interface PostTicketUsersIdRequest {
    /**
     * 
     * @type {TicketUser}
     * @memberof PostTicketUsersIdRequest
     */
    'ticketUser'?: TicketUser;
}
/**
 * 
 * @export
 * @interface PostTicketUsersIdResponse
 */
export interface PostTicketUsersIdResponse {
    /**
     * 
     * @type {TicketUser}
     * @memberof PostTicketUsersIdResponse
     */
    'ticketUser'?: TicketUser;
}
/**
 * 
 * @export
 * @interface PostTicketUsersRequest
 */
export interface PostTicketUsersRequest {
    /**
     * 
     * @type {number}
     * @memberof PostTicketUsersRequest
     */
    'ticketId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PostTicketUsersRequest
     */
    'userIds': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PostTicketUsersRequest
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface PostTicketUsersResponse
 */
export interface PostTicketUsersResponse {
    /**
     * 
     * @type {Array<TicketUser>}
     * @memberof PostTicketUsersResponse
     */
    'ticketUsers': Array<TicketUser>;
}
/**
 * 
 * @export
 * @interface PostTicketsIdRequest
 */
export interface PostTicketsIdRequest {
    /**
     * 
     * @type {Ticket}
     * @memberof PostTicketsIdRequest
     */
    'ticket'?: Ticket;
}
/**
 * 
 * @export
 * @interface PostTicketsIdResponse
 */
export interface PostTicketsIdResponse {
    /**
     * 
     * @type {Ticket}
     * @memberof PostTicketsIdResponse
     */
    'ticket'?: Ticket;
}
/**
 * 
 * @export
 * @interface PostTicketsRequest
 */
export interface PostTicketsRequest {
    /**
     * 
     * @type {Ticket}
     * @memberof PostTicketsRequest
     */
    'ticket'?: Ticket;
}
/**
 * 
 * @export
 * @interface PostTicketsResponse
 */
export interface PostTicketsResponse {
    /**
     * 
     * @type {Ticket}
     * @memberof PostTicketsResponse
     */
    'ticket'?: Ticket;
}
/**
 * 
 * @export
 * @interface PostUnitsIdRequest
 */
export interface PostUnitsIdRequest {
    /**
     * 
     * @type {Unit}
     * @memberof PostUnitsIdRequest
     */
    'unit'?: Unit;
}
/**
 * 
 * @export
 * @interface PostUnitsIdResponse
 */
export interface PostUnitsIdResponse {
    /**
     * 
     * @type {Unit}
     * @memberof PostUnitsIdResponse
     */
    'unit'?: Unit;
}
/**
 * 
 * @export
 * @interface PostUnitsRequest
 */
export interface PostUnitsRequest {
    /**
     * 
     * @type {Unit}
     * @memberof PostUnitsRequest
     */
    'unit': Unit;
}
/**
 * 
 * @export
 * @interface PostUnitsResponse
 */
export interface PostUnitsResponse {
    /**
     * 
     * @type {Unit}
     * @memberof PostUnitsResponse
     */
    'unit'?: Unit;
}
/**
 * 
 * @export
 * @interface PostUploadUsersCsvFileRequest
 */
export interface PostUploadUsersCsvFileRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUploadUsersCsvFileRequest
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface PostUploadUsersCsvFileResponse
 */
export interface PostUploadUsersCsvFileResponse {
    /**
     * 
     * @type {string}
     * @memberof PostUploadUsersCsvFileResponse
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface PostUsersIdRequest
 */
export interface PostUsersIdRequest {
    /**
     * 
     * @type {User}
     * @memberof PostUsersIdRequest
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface PostUsersIdResponse
 */
export interface PostUsersIdResponse {
    /**
     * 
     * @type {User}
     * @memberof PostUsersIdResponse
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface PostUsersRequest
 */
export interface PostUsersRequest {
    /**
     * 
     * @type {User}
     * @memberof PostUsersRequest
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface PostUsersResponse
 */
export interface PostUsersResponse {
    /**
     * 
     * @type {User}
     * @memberof PostUsersResponse
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface Process
 */
export interface Process {
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    'id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    'updated_at'?: number;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    'color'?: string;
}
/**
 * 
 * @export
 * @interface PutSimulationRequest
 */
export interface PutSimulationRequest {
    /**
     * 
     * @type {string}
     * @memberof PutSimulationRequest
     */
    'mode': string;
}
/**
 * 
 * @export
 * @interface PutSimulationResponse
 */
export interface PutSimulationResponse {
    /**
     * 
     * @type {string}
     * @memberof PutSimulationResponse
     */
    ''?: string;
}
/**
 * 
 * @export
 * @interface ScheduleAlert
 */
export interface ScheduleAlert {
    /**
     * 
     * @type {number}
     * @memberof ScheduleAlert
     */
    'facility_id': number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAlert
     */
    'facility_name': string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAlert
     */
    'unit_id': number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAlert
     */
    'unit_name': string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAlert
     */
    'process_id': number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAlert
     */
    'process_name': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAlert
     */
    'end_date': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAlert
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAlert
     */
    'actual_progress_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAlert
     */
    'progress_percent': number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAlert
     */
    'delay_days': number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAlert
     */
    'ticket_id'?: number;
}
/**
 * 
 * @export
 * @interface SimulationLock
 */
export interface SimulationLock {
    /**
     * 
     * @type {string}
     * @memberof SimulationLock
     */
    'simulationName': string;
    /**
     * 
     * @type {string}
     * @memberof SimulationLock
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof SimulationLock
     */
    'lockedAt': string;
    /**
     * 
     * @type {number}
     * @memberof SimulationLock
     */
    'lockedBy': number;
}
/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'gantt_group_id': number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'process_id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'department_id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'limit_date'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'estimate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'number_of_worker'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'days_after'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'start_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'progress_percent'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'memo'?: string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'order': number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface TicketUser
 */
export interface TicketUser {
    /**
     * 
     * @type {number}
     * @memberof TicketUser
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TicketUser
     */
    'ticket_id': number;
    /**
     * 
     * @type {number}
     * @memberof TicketUser
     */
    'user_id': number;
    /**
     * 
     * @type {number}
     * @memberof TicketUser
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketUser
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof TicketUser
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface UnAssingedPileUp
 */
export interface UnAssingedPileUp {
    /**
     * 
     * @type {Array<PileUpByFacility>}
     * @memberof UnAssingedPileUp
     */
    'facilities': Array<PileUpByFacility>;
    /**
     * 
     * @type {Array<number>}
     * @memberof UnAssingedPileUp
     */
    'labels': Array<number>;
    /**
     * 
     * @type {Array<object>}
     * @memberof UnAssingedPileUp
     */
    'styles': Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof UnAssingedPileUp
     */
    'display': boolean;
}
/**
 * 
 * @export
 * @interface Unit
 */
export interface Unit {
    /**
     * 
     * @type {number}
     * @memberof Unit
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Unit
     */
    'facility_id': number;
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Unit
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof Unit
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof Unit
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'department_id': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'limit_of_operation': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'updated_at'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'role': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'password_reset': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'employment_start_date': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'employment_end_date'?: string | null;
}
/**
 * 
 * @export
 * @interface WorkHour
 */
export interface WorkHour {
    /**
     * 
     * @type {number}
     * @memberof WorkHour
     */
    'process_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkHour
     */
    'work_hour'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary DeleteDepartmentsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartmentsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDepartmentsId', 'id', id)
            const localVarPath = `/api/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteFacilitiesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFacilitiesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFacilitiesId', 'id', id)
            const localVarPath = `/api/facilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteFacilitySharedLinksId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFacilitySharedLinksId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFacilitySharedLinksId', 'id', id)
            const localVarPath = `/api/facilitySharedLinks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteGanttGroupsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGanttGroupsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGanttGroupsId', 'id', id)
            const localVarPath = `/api/ganttGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteHolidaysId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHolidaysId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteHolidaysId', 'id', id)
            const localVarPath = `/api/holidays/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteMilestonesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestonesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMilestonesId', 'id', id)
            const localVarPath = `/api/milestones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteOperationSettingsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperationSettingsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOperationSettingsId', 'id', id)
            const localVarPath = `/api/operationSettings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteProcessesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProcessesId', 'id', id)
            const localVarPath = `/api/processes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {DeleteSimulationRequest} [deleteSimulationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimulation: async (deleteSimulationRequest?: DeleteSimulationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/simulation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteSimulationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteTicketUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTicketUsersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTicketUsersId', 'id', id)
            const localVarPath = `/api/ticketUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteTicketsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTicketsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTicketsId', 'id', id)
            const localVarPath = `/api/tickets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteUnitsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnitsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUnitsId', 'id', id)
            const localVarPath = `/api/units/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUsersId', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetAllTicket
         * @param {Array<string>} [facilityTypes] 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTickets: async (facilityTypes?: Array<string>, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/all-tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (facilityTypes) {
                localVarQueryParameter['facilityTypes'] = facilityTypes;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetDefaultPileUps
         * @param {number} facilityId 
         * @param {boolean} isAllMode 
         * @param {Array<string>} facilityTypes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultPileUps: async (facilityId: number, isAllMode: boolean, facilityTypes: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityId' is not null or undefined
            assertParamExists('getDefaultPileUps', 'facilityId', facilityId)
            // verify required parameter 'isAllMode' is not null or undefined
            assertParamExists('getDefaultPileUps', 'isAllMode', isAllMode)
            // verify required parameter 'facilityTypes' is not null or undefined
            assertParamExists('getDefaultPileUps', 'facilityTypes', facilityTypes)
            const localVarPath = `/api/defaultPileUps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (facilityId !== undefined) {
                localVarQueryParameter['facilityId'] = facilityId;
            }

            if (isAllMode !== undefined) {
                localVarQueryParameter['isAllMode'] = isAllMode;
            }

            if (facilityTypes) {
                localVarQueryParameter['facilityTypes'] = facilityTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetDepartments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetDepartmentsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDepartmentsId', 'id', id)
            const localVarPath = `/api/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetFacilities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilities: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/facilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetFacilitiesId
         * @param {number} id 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilitiesId: async (id: number, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFacilitiesId', 'id', id)
            const localVarPath = `/api/facilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetFacilitySharedLinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilitySharedLinks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/facilitySharedLinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetFacilitySharedLinksId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilitySharedLinksId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFacilitySharedLinksId', 'id', id)
            const localVarPath = `/api/facilitySharedLinks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetGanttGroups
         * @param {number} facilityId 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGanttGroups: async (facilityId: number, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityId' is not null or undefined
            assertParamExists('getGanttGroups', 'facilityId', facilityId)
            const localVarPath = `/api/ganttGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (facilityId !== undefined) {
                localVarQueryParameter['facilityId'] = facilityId;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetGanttGroupsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGanttGroupsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGanttGroupsId', 'id', id)
            const localVarPath = `/api/ganttGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetHolidays
         * @param {number} facilityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHolidays: async (facilityId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityId' is not null or undefined
            assertParamExists('getHolidays', 'facilityId', facilityId)
            const localVarPath = `/api/holidays`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (facilityId !== undefined) {
                localVarQueryParameter['facilityId'] = facilityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetHolidaysId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHolidaysId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHolidaysId', 'id', id)
            const localVarPath = `/api/holidays/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetMilestones
         * @param {number} [facilityId] 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestones: async (facilityId?: number, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/milestones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (facilityId !== undefined) {
                localVarQueryParameter['facilityId'] = facilityId;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetMilestonesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestonesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMilestonesId', 'id', id)
            const localVarPath = `/api/milestones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetOperationSettingsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationSettingsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOperationSettingsId', 'id', id)
            const localVarPath = `/api/operationSettings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPileUps
         * @param {number} facilityId 
         * @param {Array<string>} [facilityTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPileUps: async (facilityId: number, facilityTypes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityId' is not null or undefined
            assertParamExists('getPileUps', 'facilityId', facilityId)
            const localVarPath = `/api/pileUps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (facilityId !== undefined) {
                localVarQueryParameter['facilityId'] = facilityId;
            }

            if (facilityTypes) {
                localVarQueryParameter['facilityTypes'] = facilityTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetProcesses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetProcessesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProcessesId', 'id', id)
            const localVarPath = `/api/processes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetScheduleAlerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleAlerts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/scheduleAlerts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulation: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/simulation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationMasterDiff: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/simulationMasterDiff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTicketMemoId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketMemoId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTicketMemoId', 'id', id)
            const localVarPath = `/api/ticket-memo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTicketUsers
         * @param {Array<number>} ticketIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketUsers: async (ticketIds: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketIds' is not null or undefined
            assertParamExists('getTicketUsers', 'ticketIds', ticketIds)
            const localVarPath = `/api/ticketUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ticketIds) {
                localVarQueryParameter['ticketIds'] = ticketIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTicketUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketUsersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTicketUsersId', 'id', id)
            const localVarPath = `/api/ticketUsers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTickets
         * @param {Array<number>} ganttGroupIds 
         * @param {string} [mode] prod or null
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTickets: async (ganttGroupIds: Array<number>, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ganttGroupIds' is not null or undefined
            assertParamExists('getTickets', 'ganttGroupIds', ganttGroupIds)
            const localVarPath = `/api/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ganttGroupIds) {
                localVarQueryParameter['ganttGroupIds'] = ganttGroupIds;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTicketsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTicketsId', 'id', id)
            const localVarPath = `/api/tickets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetUnits
         * @param {number} facilityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnits: async (facilityId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityId' is not null or undefined
            assertParamExists('getUnits', 'facilityId', facilityId)
            const localVarPath = `/api/units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (facilityId !== undefined) {
                localVarQueryParameter['facilityId'] = facilityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetUnitsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnitsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUnitsId', 'id', id)
            const localVarPath = `/api/units/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/userInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUsersId', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostCopyFacilitys
         * @param {PostCopyFacilitysRequest} [postCopyFacilitysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCopyFacilitys: async (postCopyFacilitysRequest?: PostCopyFacilitysRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/copyFacilitys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCopyFacilitysRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostDepartments
         * @param {PostDepartmentsRequest} [postDepartmentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDepartments: async (postDepartmentsRequest?: PostDepartmentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postDepartmentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostDepartmentsId
         * @param {number} id 
         * @param {PostDepartmentsRequest} [postDepartmentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDepartmentsId: async (id: number, postDepartmentsRequest?: PostDepartmentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postDepartmentsId', 'id', id)
            const localVarPath = `/api/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postDepartmentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostFacilities
         * @param {PostFacilitiesRequest} [postFacilitiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFacilities: async (postFacilitiesRequest?: PostFacilitiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/facilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postFacilitiesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostFacilitiesId
         * @param {number} id 
         * @param {PostFacilitiesRequest} [postFacilitiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFacilitiesId: async (id: number, postFacilitiesRequest?: PostFacilitiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postFacilitiesId', 'id', id)
            const localVarPath = `/api/facilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postFacilitiesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostFacilitySharedLinks
         * @param {PostFacilitySharedLinksRequest} [postFacilitySharedLinksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFacilitySharedLinks: async (postFacilitySharedLinksRequest?: PostFacilitySharedLinksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/facilitySharedLinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postFacilitySharedLinksRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostFacilitySharedLinksId
         * @param {number} id 
         * @param {PostFacilitySharedLinksRequest} [postFacilitySharedLinksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFacilitySharedLinksId: async (id: number, postFacilitySharedLinksRequest?: PostFacilitySharedLinksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postFacilitySharedLinksId', 'id', id)
            const localVarPath = `/api/facilitySharedLinks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postFacilitySharedLinksRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostGanttGroups
         * @param {PostGanttGroupsRequest} [postGanttGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGanttGroups: async (postGanttGroupsRequest?: PostGanttGroupsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ganttGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGanttGroupsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostGanttGroupsId
         * @param {number} id 
         * @param {PostGanttGroupsRequest} [postGanttGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGanttGroupsId: async (id: number, postGanttGroupsRequest?: PostGanttGroupsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postGanttGroupsId', 'id', id)
            const localVarPath = `/api/ganttGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGanttGroupsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostHolidays
         * @param {PostHolidaysRequest} [postHolidaysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHolidays: async (postHolidaysRequest?: PostHolidaysRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/holidays`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postHolidaysRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostHolidaysId
         * @param {number} id 
         * @param {PostHolidaysRequest} [postHolidaysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHolidaysId: async (id: number, postHolidaysRequest?: PostHolidaysRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postHolidaysId', 'id', id)
            const localVarPath = `/api/holidays/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postHolidaysRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostLoginRequest} [postLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (postLoginRequest?: PostLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostMilestones
         * @param {PostMilestonesRequest} [postMilestonesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMilestones: async (postMilestonesRequest?: PostMilestonesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/milestones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postMilestonesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostMilestonesId
         * @param {number} id 
         * @param {PostMilestonesRequest} [postMilestonesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMilestonesId: async (id: number, postMilestonesRequest?: PostMilestonesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postMilestonesId', 'id', id)
            const localVarPath = `/api/milestones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postMilestonesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostOperationSettingsId
         * @param {number} id 
         * @param {PostOperationSettingsRequest} [postOperationSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOperationSettingsId: async (id: number, postOperationSettingsRequest?: PostOperationSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postOperationSettingsId', 'id', id)
            const localVarPath = `/api/operationSettings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postOperationSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostProcesses
         * @param {PostProcessesRequest} [postProcessesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProcesses: async (postProcessesRequest?: PostProcessesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProcessesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostProcessesId
         * @param {number} id 
         * @param {PostProcessesRequest} [postProcessesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProcessesId: async (id: number, postProcessesRequest?: PostProcessesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postProcessesId', 'id', id)
            const localVarPath = `/api/processes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProcessesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostSimulation
         * @param {PostSimulationRequest} [postSimulationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSimulation: async (postSimulationRequest?: PostSimulationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/simulation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSimulationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostTicketMemoId
         * @param {number} id 
         * @param {PostTicketMemoIdRequest} [postTicketMemoIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTicketMemoId: async (id: number, postTicketMemoIdRequest?: PostTicketMemoIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postTicketMemoId', 'id', id)
            const localVarPath = `/api/ticket-memo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTicketMemoIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostTicketUsers
         * @param {PostTicketUsersRequest} [postTicketUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTicketUsers: async (postTicketUsersRequest?: PostTicketUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ticketUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTicketUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostTickets
         * @param {PostTicketsRequest} [postTicketsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTickets: async (postTicketsRequest?: PostTicketsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTicketsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostTicketsId
         * @param {number} id 
         * @param {PostTicketsRequest} [postTicketsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTicketsId: async (id: number, postTicketsRequest?: PostTicketsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postTicketsId', 'id', id)
            const localVarPath = `/api/tickets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTicketsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostUnits
         * @param {PostUnitsRequest} [postUnitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnits: async (postUnitsRequest?: PostUnitsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUnitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostUnitsId
         * @param {number} id 
         * @param {PostUnitsRequest} [postUnitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnitsId: async (id: number, postUnitsRequest?: PostUnitsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postUnitsId', 'id', id)
            const localVarPath = `/api/units/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUnitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UploadUsersCsvFile
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUploadUsersCsvFile: async (body?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostUsers
         * @param {PostUsersRequest} [postUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsers: async (postUsersRequest?: PostUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PostUsersId
         * @param {number} id 
         * @param {PostUsersRequest} [postUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersId: async (id: number, postUsersRequest?: PostUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postUsersId', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PutSimulationRequest} [putSimulationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSimulation: async (putSimulationRequest?: PutSimulationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/simulation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putSimulationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary DeleteDepartmentsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDepartmentsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDepartmentsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteFacilitiesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFacilitiesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFacilitiesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteFacilitySharedLinksId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFacilitySharedLinksId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFacilitySharedLinksId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteGanttGroupsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGanttGroupsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGanttGroupsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteHolidaysId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHolidaysId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHolidaysId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteMilestonesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMilestonesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMilestonesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteOperationSettingsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOperationSettingsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOperationSettingsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteProcessesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProcessesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProcessesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {DeleteSimulationRequest} [deleteSimulationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSimulation(deleteSimulationRequest?: DeleteSimulationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSimulationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSimulation(deleteSimulationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteTicketUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTicketUsersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTicketUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteTicketsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTicketsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTicketsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteUnitsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUnitsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUnitsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DeleteUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetAllTicket
         * @param {Array<string>} [facilityTypes] 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTickets(facilityTypes?: Array<string>, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllTicketsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTickets(facilityTypes, mode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetDefaultPileUps
         * @param {number} facilityId 
         * @param {boolean} isAllMode 
         * @param {Array<string>} facilityTypes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultPileUps(facilityId: number, isAllMode: boolean, facilityTypes: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDefaultPileUpsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultPileUps(facilityId, isAllMode, facilityTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetDepartments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDepartmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetDepartmentsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartmentsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDepartmentsIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartmentsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetFacilities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFacilities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFacilitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFacilities(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetFacilitiesId
         * @param {number} id 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFacilitiesId(id: number, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFacilitiesIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFacilitiesId(id, mode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetFacilitySharedLinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFacilitySharedLinks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFacilitySharedLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFacilitySharedLinks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetFacilitySharedLinksId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFacilitySharedLinksId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFacilitySharedLinksIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFacilitySharedLinksId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetGanttGroups
         * @param {number} facilityId 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGanttGroups(facilityId: number, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGanttGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGanttGroups(facilityId, mode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetGanttGroupsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGanttGroupsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGanttGroupsIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGanttGroupsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetHolidays
         * @param {number} facilityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHolidays(facilityId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHolidaysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHolidays(facilityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetHolidaysId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHolidaysId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHolidaysIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHolidaysId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetMilestones
         * @param {number} [facilityId] 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMilestones(facilityId?: number, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMilestonesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMilestones(facilityId, mode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetMilestonesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMilestonesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMilestonesIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMilestonesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetOperationSettingsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperationSettingsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOperationSettingsIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOperationSettingsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetPileUps
         * @param {number} facilityId 
         * @param {Array<string>} [facilityTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPileUps(facilityId: number, facilityTypes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPileUpsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPileUps(facilityId, facilityTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetProcesses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcesses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProcessesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcesses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetProcessesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProcessesIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetScheduleAlerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduleAlerts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScheduleAlertsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduleAlerts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimulation(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimulationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimulation(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimulationMasterDiff(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSimulationMasterDiffResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimulationMasterDiff(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetTicketMemoId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTicketMemoId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTicketMemoIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTicketMemoId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetTicketUsers
         * @param {Array<number>} ticketIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTicketUsers(ticketIds: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTicketUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTicketUsers(ticketIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetTicketUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTicketUsersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTicketUsersIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTicketUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetTickets
         * @param {Array<number>} ganttGroupIds 
         * @param {string} [mode] prod or null
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTickets(ganttGroupIds: Array<number>, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTicketsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTickets(ganttGroupIds, mode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetTicketsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTicketsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTicketsIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTicketsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetUnits
         * @param {number} facilityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnits(facilityId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUnitsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnits(facilityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetUnitsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnitsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUnitsIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnitsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostCopyFacilitys
         * @param {PostCopyFacilitysRequest} [postCopyFacilitysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCopyFacilitys(postCopyFacilitysRequest?: PostCopyFacilitysRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCopyFacilitys(postCopyFacilitysRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostDepartments
         * @param {PostDepartmentsRequest} [postDepartmentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDepartments(postDepartmentsRequest?: PostDepartmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDepartments(postDepartmentsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostDepartmentsId
         * @param {number} id 
         * @param {PostDepartmentsRequest} [postDepartmentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDepartmentsId(id: number, postDepartmentsRequest?: PostDepartmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDepartmentsId(id, postDepartmentsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostFacilities
         * @param {PostFacilitiesRequest} [postFacilitiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFacilities(postFacilitiesRequest?: PostFacilitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFacilities(postFacilitiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostFacilitiesId
         * @param {number} id 
         * @param {PostFacilitiesRequest} [postFacilitiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFacilitiesId(id: number, postFacilitiesRequest?: PostFacilitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFacilitiesId(id, postFacilitiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostFacilitySharedLinks
         * @param {PostFacilitySharedLinksRequest} [postFacilitySharedLinksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFacilitySharedLinks(postFacilitySharedLinksRequest?: PostFacilitySharedLinksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostFacilitySharedLinksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFacilitySharedLinks(postFacilitySharedLinksRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostFacilitySharedLinksId
         * @param {number} id 
         * @param {PostFacilitySharedLinksRequest} [postFacilitySharedLinksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFacilitySharedLinksId(id: number, postFacilitySharedLinksRequest?: PostFacilitySharedLinksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFacilitySharedLinksId(id, postFacilitySharedLinksRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostGanttGroups
         * @param {PostGanttGroupsRequest} [postGanttGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGanttGroups(postGanttGroupsRequest?: PostGanttGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGanttGroups(postGanttGroupsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostGanttGroupsId
         * @param {number} id 
         * @param {PostGanttGroupsRequest} [postGanttGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGanttGroupsId(id: number, postGanttGroupsRequest?: PostGanttGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGanttGroupsId(id, postGanttGroupsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostHolidays
         * @param {PostHolidaysRequest} [postHolidaysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postHolidays(postHolidaysRequest?: PostHolidaysRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postHolidays(postHolidaysRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostHolidaysId
         * @param {number} id 
         * @param {PostHolidaysRequest} [postHolidaysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postHolidaysId(id: number, postHolidaysRequest?: PostHolidaysRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postHolidaysId(id, postHolidaysRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostLoginRequest} [postLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(postLoginRequest?: PostLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogin(postLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogout(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogout(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostMilestones
         * @param {PostMilestonesRequest} [postMilestonesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMilestones(postMilestonesRequest?: PostMilestonesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostMilestonesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMilestones(postMilestonesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostMilestonesId
         * @param {number} id 
         * @param {PostMilestonesRequest} [postMilestonesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMilestonesId(id: number, postMilestonesRequest?: PostMilestonesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMilestonesId(id, postMilestonesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostOperationSettingsId
         * @param {number} id 
         * @param {PostOperationSettingsRequest} [postOperationSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOperationSettingsId(id: number, postOperationSettingsRequest?: PostOperationSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOperationSettingsId(id, postOperationSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostProcesses
         * @param {PostProcessesRequest} [postProcessesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProcesses(postProcessesRequest?: PostProcessesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProcesses(postProcessesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostProcessesId
         * @param {number} id 
         * @param {PostProcessesRequest} [postProcessesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProcessesId(id: number, postProcessesRequest?: PostProcessesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProcessesId(id, postProcessesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostSimulation
         * @param {PostSimulationRequest} [postSimulationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSimulation(postSimulationRequest?: PostSimulationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSimulationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSimulation(postSimulationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostTicketMemoId
         * @param {number} id 
         * @param {PostTicketMemoIdRequest} [postTicketMemoIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTicketMemoId(id: number, postTicketMemoIdRequest?: PostTicketMemoIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostTicketMemoIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTicketMemoId(id, postTicketMemoIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostTicketUsers
         * @param {PostTicketUsersRequest} [postTicketUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTicketUsers(postTicketUsersRequest?: PostTicketUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostTicketUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTicketUsers(postTicketUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostTickets
         * @param {PostTicketsRequest} [postTicketsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTickets(postTicketsRequest?: PostTicketsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostTicketsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTickets(postTicketsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostTicketsId
         * @param {number} id 
         * @param {PostTicketsRequest} [postTicketsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTicketsId(id: number, postTicketsRequest?: PostTicketsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostTicketsIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTicketsId(id, postTicketsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostUnits
         * @param {PostUnitsRequest} [postUnitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUnits(postUnitsRequest?: PostUnitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUnits(postUnitsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostUnitsId
         * @param {number} id 
         * @param {PostUnitsRequest} [postUnitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUnitsId(id: number, postUnitsRequest?: PostUnitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUnitsId(id, postUnitsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary UploadUsersCsvFile
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUploadUsersCsvFile(body?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUploadUsersCsvFile(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostUsers
         * @param {PostUsersRequest} [postUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsers(postUsersRequest?: PostUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUsers(postUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PostUsersId
         * @param {number} id 
         * @param {PostUsersRequest} [postUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsersId(id: number, postUsersRequest?: PostUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUsersId(id, postUsersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PutSimulationRequest} [putSimulationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSimulation(putSimulationRequest?: PutSimulationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutSimulationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSimulation(putSimulationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary DeleteDepartmentsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartmentsId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDepartmentsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteFacilitiesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFacilitiesId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFacilitiesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteFacilitySharedLinksId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFacilitySharedLinksId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFacilitySharedLinksId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteGanttGroupsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGanttGroupsId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGanttGroupsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteHolidaysId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHolidaysId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteHolidaysId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteMilestonesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestonesId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMilestonesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteOperationSettingsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperationSettingsId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOperationSettingsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteProcessesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessesId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProcessesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {DeleteSimulationRequest} [deleteSimulationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSimulation(deleteSimulationRequest?: DeleteSimulationRequest, options?: any): AxiosPromise<DeleteSimulationResponse> {
            return localVarFp.deleteSimulation(deleteSimulationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteTicketUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTicketUsersId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTicketUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteTicketsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTicketsId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTicketsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteUnitsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnitsId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUnitsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersId(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetAllTicket
         * @param {Array<string>} [facilityTypes] 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTickets(facilityTypes?: Array<string>, mode?: string, options?: any): AxiosPromise<GetAllTicketsResponse> {
            return localVarFp.getAllTickets(facilityTypes, mode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetDefaultPileUps
         * @param {number} facilityId 
         * @param {boolean} isAllMode 
         * @param {Array<string>} facilityTypes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultPileUps(facilityId: number, isAllMode: boolean, facilityTypes: Array<string>, options?: any): AxiosPromise<GetDefaultPileUpsResponse> {
            return localVarFp.getDefaultPileUps(facilityId, isAllMode, facilityTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetDepartments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartments(options?: any): AxiosPromise<GetDepartmentsResponse> {
            return localVarFp.getDepartments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetDepartmentsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentsId(id: number, options?: any): AxiosPromise<GetDepartmentsIdResponse> {
            return localVarFp.getDepartmentsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetFacilities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilities(options?: any): AxiosPromise<GetFacilitiesResponse> {
            return localVarFp.getFacilities(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetFacilitiesId
         * @param {number} id 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilitiesId(id: number, mode?: string, options?: any): AxiosPromise<GetFacilitiesIdResponse> {
            return localVarFp.getFacilitiesId(id, mode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetFacilitySharedLinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilitySharedLinks(options?: any): AxiosPromise<GetFacilitySharedLinksResponse> {
            return localVarFp.getFacilitySharedLinks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetFacilitySharedLinksId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilitySharedLinksId(id: number, options?: any): AxiosPromise<GetFacilitySharedLinksIdResponse> {
            return localVarFp.getFacilitySharedLinksId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetGanttGroups
         * @param {number} facilityId 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGanttGroups(facilityId: number, mode?: string, options?: any): AxiosPromise<GetGanttGroupsResponse> {
            return localVarFp.getGanttGroups(facilityId, mode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetGanttGroupsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGanttGroupsId(id: number, options?: any): AxiosPromise<GetGanttGroupsIdResponse> {
            return localVarFp.getGanttGroupsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetHolidays
         * @param {number} facilityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHolidays(facilityId: number, options?: any): AxiosPromise<GetHolidaysResponse> {
            return localVarFp.getHolidays(facilityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetHolidaysId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHolidaysId(id: number, options?: any): AxiosPromise<GetHolidaysIdResponse> {
            return localVarFp.getHolidaysId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetMilestones
         * @param {number} [facilityId] 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestones(facilityId?: number, mode?: string, options?: any): AxiosPromise<GetMilestonesResponse> {
            return localVarFp.getMilestones(facilityId, mode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetMilestonesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestonesId(id: number, options?: any): AxiosPromise<GetMilestonesIdResponse> {
            return localVarFp.getMilestonesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetOperationSettingsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationSettingsId(id: number, options?: any): AxiosPromise<GetOperationSettingsIdResponse> {
            return localVarFp.getOperationSettingsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetPileUps
         * @param {number} facilityId 
         * @param {Array<string>} [facilityTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPileUps(facilityId: number, facilityTypes?: Array<string>, options?: any): AxiosPromise<GetPileUpsResponse> {
            return localVarFp.getPileUps(facilityId, facilityTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetProcesses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcesses(options?: any): AxiosPromise<GetProcessesResponse> {
            return localVarFp.getProcesses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetProcessesId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessesId(id: number, options?: any): AxiosPromise<GetProcessesIdResponse> {
            return localVarFp.getProcessesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetScheduleAlerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduleAlerts(options?: any): AxiosPromise<GetScheduleAlertsResponse> {
            return localVarFp.getScheduleAlerts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulation(body?: object, options?: any): AxiosPromise<GetSimulationResponse> {
            return localVarFp.getSimulation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationMasterDiff(body?: object, options?: any): AxiosPromise<GetSimulationMasterDiffResponse> {
            return localVarFp.getSimulationMasterDiff(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetTicketMemoId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketMemoId(id: number, options?: any): AxiosPromise<GetTicketMemoIdResponse> {
            return localVarFp.getTicketMemoId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetTicketUsers
         * @param {Array<number>} ticketIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketUsers(ticketIds: Array<number>, options?: any): AxiosPromise<GetTicketUsersResponse> {
            return localVarFp.getTicketUsers(ticketIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetTicketUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketUsersId(id: number, options?: any): AxiosPromise<GetTicketUsersIdResponse> {
            return localVarFp.getTicketUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetTickets
         * @param {Array<number>} ganttGroupIds 
         * @param {string} [mode] prod or null
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTickets(ganttGroupIds: Array<number>, mode?: string, options?: any): AxiosPromise<GetTicketsResponse> {
            return localVarFp.getTickets(ganttGroupIds, mode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetTicketsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketsId(id: number, options?: any): AxiosPromise<GetTicketsIdResponse> {
            return localVarFp.getTicketsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetUnits
         * @param {number} facilityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnits(facilityId: number, options?: any): AxiosPromise<GetUnitsResponse> {
            return localVarFp.getUnits(facilityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetUnitsId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnitsId(id: number, options?: any): AxiosPromise<GetUnitsIdResponse> {
            return localVarFp.getUnitsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options?: any): AxiosPromise<GetUserInfoResponse> {
            return localVarFp.getUserInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<GetUsersResponse> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetUsersId
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersId(id: number, options?: any): AxiosPromise<GetUsersIdResponse> {
            return localVarFp.getUsersId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostCopyFacilitys
         * @param {PostCopyFacilitysRequest} [postCopyFacilitysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCopyFacilitys(postCopyFacilitysRequest?: PostCopyFacilitysRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postCopyFacilitys(postCopyFacilitysRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostDepartments
         * @param {PostDepartmentsRequest} [postDepartmentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDepartments(postDepartmentsRequest?: PostDepartmentsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postDepartments(postDepartmentsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostDepartmentsId
         * @param {number} id 
         * @param {PostDepartmentsRequest} [postDepartmentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDepartmentsId(id: number, postDepartmentsRequest?: PostDepartmentsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postDepartmentsId(id, postDepartmentsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostFacilities
         * @param {PostFacilitiesRequest} [postFacilitiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFacilities(postFacilitiesRequest?: PostFacilitiesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postFacilities(postFacilitiesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostFacilitiesId
         * @param {number} id 
         * @param {PostFacilitiesRequest} [postFacilitiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFacilitiesId(id: number, postFacilitiesRequest?: PostFacilitiesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postFacilitiesId(id, postFacilitiesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostFacilitySharedLinks
         * @param {PostFacilitySharedLinksRequest} [postFacilitySharedLinksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFacilitySharedLinks(postFacilitySharedLinksRequest?: PostFacilitySharedLinksRequest, options?: any): AxiosPromise<PostFacilitySharedLinksResponse> {
            return localVarFp.postFacilitySharedLinks(postFacilitySharedLinksRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostFacilitySharedLinksId
         * @param {number} id 
         * @param {PostFacilitySharedLinksRequest} [postFacilitySharedLinksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFacilitySharedLinksId(id: number, postFacilitySharedLinksRequest?: PostFacilitySharedLinksRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postFacilitySharedLinksId(id, postFacilitySharedLinksRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostGanttGroups
         * @param {PostGanttGroupsRequest} [postGanttGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGanttGroups(postGanttGroupsRequest?: PostGanttGroupsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postGanttGroups(postGanttGroupsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostGanttGroupsId
         * @param {number} id 
         * @param {PostGanttGroupsRequest} [postGanttGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGanttGroupsId(id: number, postGanttGroupsRequest?: PostGanttGroupsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postGanttGroupsId(id, postGanttGroupsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostHolidays
         * @param {PostHolidaysRequest} [postHolidaysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHolidays(postHolidaysRequest?: PostHolidaysRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postHolidays(postHolidaysRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostHolidaysId
         * @param {number} id 
         * @param {PostHolidaysRequest} [postHolidaysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHolidaysId(id: number, postHolidaysRequest?: PostHolidaysRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postHolidaysId(id, postHolidaysRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostLoginRequest} [postLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(postLoginRequest?: PostLoginRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postLogin(postLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.postLogout(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostMilestones
         * @param {PostMilestonesRequest} [postMilestonesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMilestones(postMilestonesRequest?: PostMilestonesRequest, options?: any): AxiosPromise<PostMilestonesResponse> {
            return localVarFp.postMilestones(postMilestonesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostMilestonesId
         * @param {number} id 
         * @param {PostMilestonesRequest} [postMilestonesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMilestonesId(id: number, postMilestonesRequest?: PostMilestonesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postMilestonesId(id, postMilestonesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostOperationSettingsId
         * @param {number} id 
         * @param {PostOperationSettingsRequest} [postOperationSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOperationSettingsId(id: number, postOperationSettingsRequest?: PostOperationSettingsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postOperationSettingsId(id, postOperationSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostProcesses
         * @param {PostProcessesRequest} [postProcessesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProcesses(postProcessesRequest?: PostProcessesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postProcesses(postProcessesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostProcessesId
         * @param {number} id 
         * @param {PostProcessesRequest} [postProcessesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProcessesId(id: number, postProcessesRequest?: PostProcessesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postProcessesId(id, postProcessesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostSimulation
         * @param {PostSimulationRequest} [postSimulationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSimulation(postSimulationRequest?: PostSimulationRequest, options?: any): AxiosPromise<PostSimulationResponse> {
            return localVarFp.postSimulation(postSimulationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostTicketMemoId
         * @param {number} id 
         * @param {PostTicketMemoIdRequest} [postTicketMemoIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTicketMemoId(id: number, postTicketMemoIdRequest?: PostTicketMemoIdRequest, options?: any): AxiosPromise<PostTicketMemoIdResponse> {
            return localVarFp.postTicketMemoId(id, postTicketMemoIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostTicketUsers
         * @param {PostTicketUsersRequest} [postTicketUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTicketUsers(postTicketUsersRequest?: PostTicketUsersRequest, options?: any): AxiosPromise<PostTicketUsersResponse> {
            return localVarFp.postTicketUsers(postTicketUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostTickets
         * @param {PostTicketsRequest} [postTicketsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTickets(postTicketsRequest?: PostTicketsRequest, options?: any): AxiosPromise<PostTicketsResponse> {
            return localVarFp.postTickets(postTicketsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostTicketsId
         * @param {number} id 
         * @param {PostTicketsRequest} [postTicketsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTicketsId(id: number, postTicketsRequest?: PostTicketsRequest, options?: any): AxiosPromise<PostTicketsIdResponse> {
            return localVarFp.postTicketsId(id, postTicketsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostUnits
         * @param {PostUnitsRequest} [postUnitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnits(postUnitsRequest?: PostUnitsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postUnits(postUnitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostUnitsId
         * @param {number} id 
         * @param {PostUnitsRequest} [postUnitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnitsId(id: number, postUnitsRequest?: PostUnitsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postUnitsId(id, postUnitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UploadUsersCsvFile
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUploadUsersCsvFile(body?: File, options?: any): AxiosPromise<void> {
            return localVarFp.postUploadUsersCsvFile(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostUsers
         * @param {PostUsersRequest} [postUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsers(postUsersRequest?: PostUsersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postUsers(postUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PostUsersId
         * @param {number} id 
         * @param {PostUsersRequest} [postUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsersId(id: number, postUsersRequest?: PostUsersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postUsersId(id, postUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PutSimulationRequest} [putSimulationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSimulation(putSimulationRequest?: PutSimulationRequest, options?: any): AxiosPromise<PutSimulationResponse> {
            return localVarFp.putSimulation(putSimulationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary DeleteDepartmentsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDepartmentsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDepartmentsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteFacilitiesId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteFacilitiesId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteFacilitiesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteFacilitySharedLinksId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteFacilitySharedLinksId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteFacilitySharedLinksId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteGanttGroupsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGanttGroupsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGanttGroupsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteHolidaysId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteHolidaysId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteHolidaysId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteMilestonesId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMilestonesId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMilestonesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteOperationSettingsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteOperationSettingsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteOperationSettingsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteProcessesId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProcessesId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProcessesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {DeleteSimulationRequest} [deleteSimulationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSimulation(deleteSimulationRequest?: DeleteSimulationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSimulation(deleteSimulationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteTicketUsersId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTicketUsersId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTicketUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteTicketsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTicketsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTicketsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteUnitsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUnitsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUnitsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteUsersId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUsersId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetAllTicket
     * @param {Array<string>} [facilityTypes] 
     * @param {string} [mode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllTickets(facilityTypes?: Array<string>, mode?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllTickets(facilityTypes, mode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetDefaultPileUps
     * @param {number} facilityId 
     * @param {boolean} isAllMode 
     * @param {Array<string>} facilityTypes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDefaultPileUps(facilityId: number, isAllMode: boolean, facilityTypes: Array<string>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDefaultPileUps(facilityId, isAllMode, facilityTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetDepartments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDepartments(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDepartments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetDepartmentsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDepartmentsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDepartmentsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetFacilities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFacilities(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFacilities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetFacilitiesId
     * @param {number} id 
     * @param {string} [mode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFacilitiesId(id: number, mode?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFacilitiesId(id, mode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetFacilitySharedLinks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFacilitySharedLinks(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFacilitySharedLinks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetFacilitySharedLinksId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFacilitySharedLinksId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFacilitySharedLinksId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetGanttGroups
     * @param {number} facilityId 
     * @param {string} [mode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGanttGroups(facilityId: number, mode?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGanttGroups(facilityId, mode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetGanttGroupsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGanttGroupsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGanttGroupsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetHolidays
     * @param {number} facilityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHolidays(facilityId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHolidays(facilityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetHolidaysId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHolidaysId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHolidaysId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetMilestones
     * @param {number} [facilityId] 
     * @param {string} [mode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMilestones(facilityId?: number, mode?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMilestones(facilityId, mode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetMilestonesId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMilestonesId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMilestonesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetOperationSettingsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOperationSettingsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getOperationSettingsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetPileUps
     * @param {number} facilityId 
     * @param {Array<string>} [facilityTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPileUps(facilityId: number, facilityTypes?: Array<string>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPileUps(facilityId, facilityTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetProcesses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProcesses(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProcesses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetProcessesId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProcessesId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProcessesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetScheduleAlerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScheduleAlerts(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScheduleAlerts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSimulation(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSimulation(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSimulationMasterDiff(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSimulationMasterDiff(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetTicketMemoId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTicketMemoId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTicketMemoId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetTicketUsers
     * @param {Array<number>} ticketIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTicketUsers(ticketIds: Array<number>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTicketUsers(ticketIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetTicketUsersId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTicketUsersId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTicketUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetTickets
     * @param {Array<number>} ganttGroupIds 
     * @param {string} [mode] prod or null
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTickets(ganttGroupIds: Array<number>, mode?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTickets(ganttGroupIds, mode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetTicketsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTicketsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTicketsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetUnits
     * @param {number} facilityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUnits(facilityId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUnits(facilityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetUnitsId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUnitsId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUnitsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetUserInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserInfo(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetUsersId
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersId(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsersId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostCopyFacilitys
     * @param {PostCopyFacilitysRequest} [postCopyFacilitysRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCopyFacilitys(postCopyFacilitysRequest?: PostCopyFacilitysRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postCopyFacilitys(postCopyFacilitysRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostDepartments
     * @param {PostDepartmentsRequest} [postDepartmentsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDepartments(postDepartmentsRequest?: PostDepartmentsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postDepartments(postDepartmentsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostDepartmentsId
     * @param {number} id 
     * @param {PostDepartmentsRequest} [postDepartmentsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDepartmentsId(id: number, postDepartmentsRequest?: PostDepartmentsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postDepartmentsId(id, postDepartmentsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostFacilities
     * @param {PostFacilitiesRequest} [postFacilitiesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFacilities(postFacilitiesRequest?: PostFacilitiesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFacilities(postFacilitiesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostFacilitiesId
     * @param {number} id 
     * @param {PostFacilitiesRequest} [postFacilitiesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFacilitiesId(id: number, postFacilitiesRequest?: PostFacilitiesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFacilitiesId(id, postFacilitiesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostFacilitySharedLinks
     * @param {PostFacilitySharedLinksRequest} [postFacilitySharedLinksRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFacilitySharedLinks(postFacilitySharedLinksRequest?: PostFacilitySharedLinksRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFacilitySharedLinks(postFacilitySharedLinksRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostFacilitySharedLinksId
     * @param {number} id 
     * @param {PostFacilitySharedLinksRequest} [postFacilitySharedLinksRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFacilitySharedLinksId(id: number, postFacilitySharedLinksRequest?: PostFacilitySharedLinksRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFacilitySharedLinksId(id, postFacilitySharedLinksRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostGanttGroups
     * @param {PostGanttGroupsRequest} [postGanttGroupsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postGanttGroups(postGanttGroupsRequest?: PostGanttGroupsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postGanttGroups(postGanttGroupsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostGanttGroupsId
     * @param {number} id 
     * @param {PostGanttGroupsRequest} [postGanttGroupsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postGanttGroupsId(id: number, postGanttGroupsRequest?: PostGanttGroupsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postGanttGroupsId(id, postGanttGroupsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostHolidays
     * @param {PostHolidaysRequest} [postHolidaysRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postHolidays(postHolidaysRequest?: PostHolidaysRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postHolidays(postHolidaysRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostHolidaysId
     * @param {number} id 
     * @param {PostHolidaysRequest} [postHolidaysRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postHolidaysId(id: number, postHolidaysRequest?: PostHolidaysRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postHolidaysId(id, postHolidaysRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostLoginRequest} [postLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogin(postLoginRequest?: PostLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postLogin(postLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogout(body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postLogout(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostMilestones
     * @param {PostMilestonesRequest} [postMilestonesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMilestones(postMilestonesRequest?: PostMilestonesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postMilestones(postMilestonesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostMilestonesId
     * @param {number} id 
     * @param {PostMilestonesRequest} [postMilestonesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMilestonesId(id: number, postMilestonesRequest?: PostMilestonesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postMilestonesId(id, postMilestonesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostOperationSettingsId
     * @param {number} id 
     * @param {PostOperationSettingsRequest} [postOperationSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postOperationSettingsId(id: number, postOperationSettingsRequest?: PostOperationSettingsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postOperationSettingsId(id, postOperationSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostProcesses
     * @param {PostProcessesRequest} [postProcessesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postProcesses(postProcessesRequest?: PostProcessesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postProcesses(postProcessesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostProcessesId
     * @param {number} id 
     * @param {PostProcessesRequest} [postProcessesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postProcessesId(id: number, postProcessesRequest?: PostProcessesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postProcessesId(id, postProcessesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostSimulation
     * @param {PostSimulationRequest} [postSimulationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postSimulation(postSimulationRequest?: PostSimulationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postSimulation(postSimulationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostTicketMemoId
     * @param {number} id 
     * @param {PostTicketMemoIdRequest} [postTicketMemoIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postTicketMemoId(id: number, postTicketMemoIdRequest?: PostTicketMemoIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postTicketMemoId(id, postTicketMemoIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostTicketUsers
     * @param {PostTicketUsersRequest} [postTicketUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postTicketUsers(postTicketUsersRequest?: PostTicketUsersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postTicketUsers(postTicketUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostTickets
     * @param {PostTicketsRequest} [postTicketsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postTickets(postTicketsRequest?: PostTicketsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postTickets(postTicketsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostTicketsId
     * @param {number} id 
     * @param {PostTicketsRequest} [postTicketsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postTicketsId(id: number, postTicketsRequest?: PostTicketsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postTicketsId(id, postTicketsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostUnits
     * @param {PostUnitsRequest} [postUnitsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUnits(postUnitsRequest?: PostUnitsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUnits(postUnitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostUnitsId
     * @param {number} id 
     * @param {PostUnitsRequest} [postUnitsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUnitsId(id: number, postUnitsRequest?: PostUnitsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUnitsId(id, postUnitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UploadUsersCsvFile
     * @param {File} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUploadUsersCsvFile(body?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUploadUsersCsvFile(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostUsers
     * @param {PostUsersRequest} [postUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUsers(postUsersRequest?: PostUsersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUsers(postUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PostUsersId
     * @param {number} id 
     * @param {PostUsersRequest} [postUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUsersId(id: number, postUsersRequest?: PostUsersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUsersId(id, postUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PutSimulationRequest} [putSimulationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putSimulation(putSimulationRequest?: PutSimulationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putSimulation(putSimulationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


